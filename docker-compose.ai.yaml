version: '3'

services:

#______________ASR_______________

  asr_api:
    container_name: asr_api
    command: uvicorn main:app --host 0.0.0.0 --port 3003 --reload
    env_file:
      - .env
    environment:
      PYTHONPATH: /app
    volumes:
      - ./ai/ASR/src:/app
    build:
      context: ai/ASR
      dockerfile: Dockerfile
    networks:
      - application_network

#______________TTS_______________

  tts_api:
    container_name: tts_api
    command: uvicorn main:app --host 0.0.0.0 --port 3004 --reload
    env_file:
      - .env
    environment:
      PYTHONPATH: /app
    volumes:
      - ./ai/TTS/src:/app
    build:
      context: ai/TTS
      dockerfile: Dockerfile
    networks:
      - application_network

#______________INTENTS_______________
  qdrant:
    container_name: qdrant
    image: qdrant/qdrant:latest
    ulimits:
      nofile:
        hard: 65535
        soft: 65535
      nproc: 65535
    restart: always
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - application_network


  text2vec:
    container_name: text2vec
    command: uvicorn main:app --host 0.0.0.0 --port 3303 --reload
    env_file:
      - .env
    # healthcheck:
    #   test: curl -f text2vec:3303/api/openapi || exit 1
    #   interval: 5s
    #   timeout: 5s
    #   retries: 5
    environment:
      PYTHONPATH: /app
    volumes:
      - ./ai/Text2Vec/src:/app
    build:
      context: ai/Text2Vec
      dockerfile: Dockerfile
    depends_on:
      qdrant:
        condition: service_started
    networks:
      - application_network

  redis_intent:
    image: redis:7.2.3-alpine3.18
    container_name: redis_intent
    restart: always
    env_file:
      - .env
    volumes:
      - redis_intent:/data
    networks:
      - application_network

  intent_api:
    container_name: intent_api
    command: uvicorn main:app --host 0.0.0.0 --port 3303 --reload
    restart: always
    env_file:
      - .env
    environment:
      PYTHONPATH: /app
    volumes:
      - ./ai/IntentAPI/src:/app
    build:
      context: ai/IntentAPI
      dockerfile: Dockerfile
    depends_on:
      redis_intent:
        condition: service_started
      text2vec:
        condition: service_started
      qdrant:
        condition: service_started
      elasticsearch:
        condition: service_started
      asr_api:
        condition: service_started
      tts_api:
        condition: service_started
    networks:
      - application_network

networks:
  application_network:

volumes:
  qdrant_data:
  redis_intent: