version: '3'

services:

#______________Auth_______________
  auth_api:
    container_name: AuthAPI
    command: uvicorn main:app --host 0.0.0.0 --port 3001 --reload
    env_file:
      - .env
    environment:
      PYTHONPATH: /src
    volumes:
      - ./AuthAPI:/src
    build:
      context: AuthAPI
      dockerfile: Dockerfile
    depends_on:
      redis:
        condition: service_started
    networks:
      - application_network
    mem_limit: 512m
    mem_reservation: 128M
    cpus: 0.5


  auth_postgres:
    image: postgres:15.5-alpine3.19
    container_name: auth_postgres
    env_file:
      - .env
    environment:
      - POSTGRES_PASSWORD=${AUTH_POSTGRES_PASSWORD}
      - POSTGRES_USER=${AUTH_POSTGRES_USER}
      - POSTGRES_DB=${AUTH_POSTGRES_DB}
      - POSTGRES_PORT=${AUTH_POSTGRES_PORT}
    volumes:
      - auth_pg_data:/var/lib/postgresql/data
    networks:
      - application_network
    mem_limit: 512m
    mem_reservation: 128M
    cpus: 1

  redis:
    image: redis:7.2.3-alpine3.18
    container_name: redis
    restart: always
    env_file:
      - .env
    volumes:
      - redis_data:/data
    networks:
      - application_network


#___________File storage________

  file_api:
    container_name: file_api
    command: >
      bash -c "alembic upgrade 657bdb3eea2b && gunicorn main:app --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:7070"
    env_file:
      - .env
    build:
      context: FileAPI
      dockerfile: Dockerfile
    depends_on:
      file_postgres:
        condition: service_healthy
      minio:
        condition: service_started
    volumes:
      - ./FileAPI/src:/app
    networks:
      - application_network

  file_postgres:
    image: postgres:15.5-alpine3.19
    container_name: postgres_file_api
    env_file:
      - .env
    environment:
      - POSTGRES_PASSWORD=${FILE_POSTGRES_PASSWORD}
      - POSTGRES_USER=${FILE_POSTGRES_USER}
      - POSTGRES_DB=${FILE_POSTGRES_NAME}
      - POSTGRES_PORT=${FILE_POSTGRES_PORT}
    expose:
      - 5432
    volumes:
      - file_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${FILE_POSTGRES_USER} -d ${FILE_POSTGRES_NAME}'" ]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - application_network

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    env_file:
      - .env
    environment:
      - MINIO_ROOT_USER=${S3_USER}
      - MINIO_ROOT_PASSWORD=${S3_PASSWORD}
    volumes:
      - minio_data:/data
    command: server --console-address ":9001" /data
    networks:
      - application_network

#______________ASR_______________

  asr_api:
    container_name: asr_api
    command: uvicorn main:app --host 0.0.0.0 --port 3003 --reload
    env_file:
      - .env
    environment:
      PYTHONPATH: /app
    volumes:
      - ./ASR/src:/app
    build:
      context: ASR
      dockerfile: Dockerfile
    networks:
      - application_network

#______________TTS_______________

  tts_api:
    container_name: tts_api
    command: uvicorn main:app --host 0.0.0.0 --port 3004 --reload
    env_file:
      - .env
    environment:
      PYTHONPATH: /app
    volumes:
      - ./TTS/src:/app
    build:
      context: TTS
      dockerfile: Dockerfile
    networks:
      - application_network

#______________INTENTS_______________
  qdrant:
    image: qdrant/qdrant:latest
    restart: always
    container_name: qdrant
    ports:
      - 6333:6333
      - 6334:6334
    expose:
      - 6333
      - 6334
      - 6335
    volumes:
      - ./qdrant_data:/qdrant/storage



#______________Nginx_______________
  nginx:
    image: nginx:1.19.2
    container_name: nginx
    volumes:
      - ./Nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./Nginx/auth_api.conf:/etc/nginx/conf.d/auth_api.conf:ro
      - ./Nginx/file_api.conf:/etc/nginx/conf.d/file_api.conf:ro
      - ./Nginx/asr_api.conf:/etc/nginx/conf.d/asr_api.conf:ro
      - ./Nginx/tts_api.conf:/etc/nginx/conf.d/tts_api.conf:ro
    depends_on:
      auth_api:
        condition: service_started
      file_api:
        condition: service_started
      asr_api:
        condition: service_started
      tts_api:
        condition: service_started
    ports:
      - "8001:8001"
      - "8002:8002"
      - "8003:8003"
      - "8004:8004"
    networks:
      - application_network



networks:
  application_network:

volumes:
  auth_pg_data:
  redis_data:
  file_data:
  minio_data:
  qdrant_data: