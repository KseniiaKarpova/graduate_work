version: '3.8'

services:

#______________Auth_______________
  auth_api:
    container_name: AuthAPI
    command: uvicorn main:app --host 0.0.0.0 --port 3001 --reload
    restart: on-failure
    env_file:
      - .env
    environment:
      PYTHONPATH: /src
    volumes:
      - ./AuthAPI:/src
    build:
      context: AuthAPI
      dockerfile: Dockerfile
    depends_on:
      redis:
        condition: service_started
    networks:
      - application_network
    mem_limit: 512m
    mem_reservation: 128M
    cpus: 0.5


  auth_postgres:
    image: postgres:15.5-alpine3.19
    container_name: auth_postgres
    restart: on-failure
    env_file:
      - .env
    environment:
      - POSTGRES_PASSWORD=${AUTH_POSTGRES_PASSWORD}
      - POSTGRES_USER=${AUTH_POSTGRES_USER}
      - POSTGRES_DB=${AUTH_POSTGRES_DB}
      - POSTGRES_PORT=${AUTH_POSTGRES_PORT}
    volumes:
      - auth_pg_data:/var/lib/postgresql/data
    networks:
      - application_network
    mem_limit: 512m
    mem_reservation: 128M
    cpus: 1

  redis:
    image: redis:7.2.3-alpine3.18
    container_name: redis
    restart: on-failure
    env_file:
      - .env
    volumes:
      - redis_data:/data
    networks:
      - application_network


#___________File storage________

  file_api:
    container_name: file_api
    command: >
      bash -c "alembic upgrade 657bdb3eea2b && uvicorn main:app --host 0.0.0.0 --port 7070 --reload"
    restart: on-failure
    env_file:
      - .env
    build:
      context: FileAPI
      dockerfile: Dockerfile
    depends_on:
      file_postgres:
        condition: service_healthy
      minio:
        condition: service_started
    volumes:
      - ./FileAPI/src:/app
    networks:
      - application_network

  file_postgres:
    image: postgres:15.5-alpine3.19
    container_name: postgres_file_api
    restart: on-failure
    env_file:
      - .env
    environment:
      - POSTGRES_PASSWORD=${FILE_POSTGRES_PASSWORD}
      - POSTGRES_USER=${FILE_POSTGRES_USER}
      - POSTGRES_DB=${FILE_POSTGRES_NAME}
      - POSTGRES_PORT=${FILE_POSTGRES_PORT}
    expose:
      - 5432
    volumes:
      - file_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${FILE_POSTGRES_USER} -d ${FILE_POSTGRES_NAME}'" ]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - application_network


#___________Assistant api________

  assistant_api:
    container_name: assistant_api
    restart: on-failure
    command: >
      bash -c "uvicorn main:app --host 0.0.0.0 --port 8080 --reload"
    env_file:
      - .env
    build:
      context: AssistantAPI
      dockerfile: Dockerfile
    depends_on:
      file_api:
        condition: service_started
      minio:
        condition: service_started
      auth_api:
        condition: service_started
      history_api:
        condition: service_started
    volumes:
      - ./AssistantAPI:/src
    networks:
      - application_network


  minio:
    image: minio/minio
    container_name: minio
    restart: on-failure
    ports:
      - "9000:9000"
      - "9001:9001"
    env_file:
      - .env
    environment:
      - MINIO_ROOT_USER=${S3_USER}
      - MINIO_ROOT_PASSWORD=${S3_PASSWORD}
    volumes:
      - minio_data:/data
    command: server --console-address ":9001" /data
    networks:
      - application_network


#______________Nginx_______________
  nginx:
    image: nginx:1.19.2
    container_name: nginx
    restart: on-failure
    volumes:
      - ./Nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./Nginx/main.conf:/etc/nginx/conf.d/main.conf:ro
    depends_on:
      auth_api:
        condition: service_started
      file_api:
        condition: service_started
      assistant_api:
        condition: service_started
      history_api:
        condition: service_started
      data_transfer:
        condition: service_started
    ports:
      - "8001:8001"
      - "8002:8002"
      - "8003:8003"
      - "8004:8004"
      - "8005:8005"
      - "8006:8006"
      - "8007:8007"
      - "8008:8008"
      - "8009:8009"
      - "8010:8010"
      - "8877:8877"
      - "8000:8000"
    networks:
      - application_network

  #____________Mongo________________
  history_db:
    image: mongo:5.0.21
    hostname: history_db
    container_name: history_db
    restart: on-failure
    env_file:
      - .env
    environment:
      - MONGO_INITDB_DATABASE=${HISTORY_MONGO_DB_NAME}
    volumes:
      - /etc/localtime:/etc/localtime:ro
    networks:
      - application_network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo $(hostname)/test --quiet
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    mem_limit: 512m
    mem_reservation: 128M
    cpus: 1

  history_api:
    container_name: HistoryAPI
    restart: on-failure
    command: uvicorn main:app --host 0.0.0.0 --port 3001 --reload
    env_file:
      - .env
    environment:
      PYTHONPATH: /src
    volumes:
      - ./HistoryAPI:/src
      - logs:/src/logs
    build:
      context: HistoryAPI
      dockerfile: Dockerfile
    depends_on:
      redis:
        condition: service_started
      history_db:
        condition: service_healthy
      
    networks:
      - application_network
    mem_limit: 512m
    mem_reservation: 128M
    cpus: 0.5



networks:
  application_network:

volumes:
  auth_pg_data:
  redis_data:
  file_data:
  minio_data:
  logs:
