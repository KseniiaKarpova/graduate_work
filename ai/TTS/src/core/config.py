from pydantic_settings import BaseSettings, SettingsConfigDict


class AuthSettings(BaseSettings):
    secret_key: str = ...
    jwt_algorithm: str = ...
    google_client_id: str = ...
    google_client_secret: str = ...
    google_token_url: str = ...
    google_base_url: str = ...
    google_userinfo_url: str = ...
    google_redirect_url: str = ...
    model_config: str = SettingsConfigDict(env_prefix='auth_')


class LoggerSettings(BaseSettings):
    filename: str = ...
    maxbytes: str = ...
    mod: str = ...
    backup_count: str = ...
    log_level: str = ...
    sentry_dsn: str = ...
    model_config: str = SettingsConfigDict(env_prefix='logger_')


class TTSModelSettings(BaseSettings):
    path: str = ...
    language: str = ...
    sample_rate: int = ...
    name: str = ...
    model_config: str = SettingsConfigDict(env_prefix='tts_')

class FileAPISettings(BaseSettings):
    host: str = ...
    port: int = ...
    url: str = ...
    model_config: str = SettingsConfigDict(env_prefix='file_api_')

    @property
    def path(self) -> str:
        return f"http://{self.host}:{self.port}{self.url}"


class Settings(BaseSettings):
    tts: TTSModelSettings = TTSModelSettings()
    auth: AuthSettings = AuthSettings()
    log_level: str = 'INFO'
    logger_filename: str = ...
    logger_maxbytes: int = 15000000
    logger_mod: str = 'a'
    logger_backup_count: int = 5
    file: FileAPISettings = FileAPISettings()


settings = Settings()
